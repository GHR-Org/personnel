/* eslint-disable react-hooks/exhaustive-deps */
// src/components/auth/AuthProvider.tsx
"use client";

import React, {
Â  createContext,
Â  useState,
Â  useEffect,
Â  ReactNode,
Â  useRef,
Â  useCallback,
} from "react";
import { useRouter, usePathname } from "next/navigation";
import { useAuth } from "@/hooks/useAuth";
import { Personnel } from "@/types/personnel";
import { useTheme } from "next-themes";
import Image from "next/image";

interface AuthContextType {
Â  user: Personnel | null;
Â  loading: boolean;
Â  logout: () => void;
}

const AuthContext = createContext<AuthContextType>({
Â  user: null,
Â  loading: true,
Â  logout: () => {},
});

interface AuthProviderProps {
Â  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
Â  const [user, setUser] = useState<Personnel | null>(null);
Â  const [loading, setLoading] = useState(true);
Â  const [isAuthorized, setIsAuthorized] = useState(false);
Â  // ðŸ›‘ ClÃ© anti-boucle
Â  const [isRedirecting, setIsRedirecting] = useState(false); 
Â  
Â  const router = useRouter();
Â  const pathname = usePathname();
Â  const { getCurrentUser, redirectByRole } = useAuth();
Â  

Â  // --- GESTION DES MESSAGES DE CHARGEMENT (InchangÃ©e) ---
Â  const loadingMessages = [
Â  Â  "Chargement de la page",
Â  Â  "Chargement des donnÃ©es, veuillez patienter",
Â  Â  "Nous y sommes presque",
Â  Â  "Encore quelques instants",
Â  ];
Â  const [currentMessage, setCurrentMessage] = useState(loadingMessages[0]);
Â  const [messageIndex, setMessageIndex] = useState(0);
Â  const [dots, setDots] = useState("");

Â  const { theme } = useTheme();
Â  const [logoSrc, setLogoSrc] = useState("/logo/dark.png");
Â  
Â  useEffect(() => {
Â  Â  setLogoSrc(theme === "dark" ? "/logo/dark.png" : "/logo/white.png");
Â  }, [theme]);

Â  useEffect(() => {
Â  Â  if (loading || !isAuthorized) {
Â  Â  Â  const messageInterval = setInterval(() => {
Â  Â  Â  Â  setMessageIndex(
Â  Â  Â  Â  Â  (prevIndex) => (prevIndex + 1) % loadingMessages.length
Â  Â  Â  Â  );
Â  Â  Â  }, 3000);
Â  Â  Â  return () => clearInterval(messageInterval);
Â  Â  }
Â  }, [loading, isAuthorized, loadingMessages.length]);

Â  useEffect(() => {
Â  Â  setCurrentMessage(loadingMessages[messageIndex]);
Â  }, [messageIndex, loadingMessages]);

Â  useEffect(() => {
Â  Â  if (loading || !isAuthorized) {
Â  Â  Â  const dotsInterval = setInterval(() => {
Â  Â  Â  Â  setDots((prevDots) => (prevDots.length >= 3 ? "" : prevDots + "."));
Â  Â  Â  }, 500);
Â  Â  Â  return () => clearInterval(dotsInterval);
Â  Â  }
Â  }, [loading, isAuthorized]);
Â  // ----------------------------------------------------------------------


Â  // --- DÃ‰FINITION DES ROUTES (Les routes complÃ¨tes sont utilisÃ©es) ---
Â  const publicRoutes = new Set([
Â  Â  "/login", "/forgot-password", "/reset-password", "/", "/page-not-found"
Â  ]);

Â  const CaissierRoutes = new Set([
Â  Â  "/caissier", "/caissier/caisse", "/caissier/invoice", "/caissier/invoice/facture", 
Â  Â  "/caissier/statistiques", "/parametres", "/parametres/general", "/parametres/profil", 
Â  Â  "/parametres/notifications", "/parametres/security", "/parametres/help", "/"
Â  ]);
Â  const RhRoutes = new Set([
Â  Â  "/rh/surveillance/conges", "/rh", "/rh/rapport", "/rh/planning", "/rh/surveillance", 
Â  Â  "/rh/surveillance/planning-personnel", "/rh/personnel", "/reservations/restaurant", 
Â  Â  "/parametres", "/parametres/general", "/parametres/profil", "/parametres/notifications", 
Â  Â  "/parametres/security", "/parametres/help", "/"
Â  ]);
Â  const ReceptionRoutes = new Set([
Â  Â  "/reception/dashboard", "/reception/reservation", "/reception", "/reception/rapports", 
Â  Â  "/reception/caissier", "/reception/caissier/caisse", "/reception/caissier/invoice", 
Â  Â  "/reception/caissier/invoice/facture", "/reception/caissier/statistiques", 
Â  Â  "/parametres", "/parametres/general", "/parametres/profil", "/parametres/notifications", 
Â  Â  "/parametres/security", "/parametres/help", "/"
Â  ]);
Â  const TechnicienRoutes = new Set([
Â  Â  "/maintenance", "/maintenance/equipements", "/maintenance/incidents", 
Â  Â  "/maintenance/interventions", "/maintenance/rapports", "/parametres", 
Â  Â  "/parametres/general", "/parametres/profil", "/parametres/notifications", 
Â  Â  "/parametres/security", "/parametres/help", "/maintenance/interventions/calendrier", 
Â  Â  "/maintenance/documentation", "/"
Â  ]);
Â  const ManagerRoutes = new Set([
Â  Â  "/manager", "/manager/personnalisation", "/manager/commande", "/manager/menus", 
Â  Â  "/manager/personnalisation", "/manager/rapports", "/manager/restaurant", "/parametres", 
Â  Â  "/parametres/general", "/parametres/profil", "/parametres/notifications", 
Â  Â  "/parametres/security", "/parametres/help", "/"
Â  ]);
Â  // ----------------------------------------------------------------------
Â  
Â  const hasCheckedPath = useRef<string | null>(null);

Â  // ðŸ›‘ NOUVEAU : Gestionnaire de fin de chargement et de redirection
Â  // Permet d'encapsuler la logique de changement d'Ã©tat
Â  const completeAuthorization = useCallback((authorized: boolean, redirectPath: string | null = null) => {
Â  Â  if (redirectPath) {
Â  Â  Â  setIsRedirecting(true);
Â  Â  Â  setLoading(true); 
Â  Â  Â  // On met le chemin actuel dans le ref, pour que l'useEffect suivant puisse dÃ©tecter le changement
Â  Â  Â  hasCheckedPath.current = pathname; 
Â  Â  Â  router.replace(redirectPath);
Â  Â  } else {
Â  Â  Â  setIsAuthorized(authorized);
Â  Â  Â  setLoading(false);
Â  Â  Â  setIsRedirecting(false); // S'assurer que le drapeau est Ã  false si l'autorisation est complÃ©tÃ©e
Â  Â  Â  hasCheckedPath.current = pathname;
Â  Â  }
Â  }, [pathname, router]);

Â  const checkAuthorization = useCallback(async () => {
Â  Â  // ðŸ›‘ ANTI-BOUCLE 1 : Si on redirige dÃ©jÃ , on s'arrÃªte.
Â  Â  if (isRedirecting) {
Â  Â  Â  setLoading(true);
Â  Â  Â  return;
Â  Â  }
Â  Â  
Â  Â  // ðŸ›‘ ANTI-BOUCLE 2 : Si le chemin a dÃ©jÃ  Ã©tÃ© vÃ©rifiÃ© avec succÃ¨s, on s'arrÃªte.
Â  Â  if (hasCheckedPath.current === pathname && isAuthorized) {
        setLoading(false);
Â  Â  Â  Â  return;
Â  Â  }
    
Â  Â  setLoading(true);
Â  Â  setIsAuthorized(false);

Â  Â  const accessToken = localStorage.getItem("access_token_ghr");

Â  Â  try {
Â  Â  Â  // 1. Gestion des routes publiques
Â  Â  Â  if (publicRoutes.has(pathname)) {
Â  Â  Â  Â  if (accessToken) {
Â  Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const userData = await getCurrentUser();
Â  Â  Â  Â  Â  Â  if (userData?.role && pathname === "/") {
Â  Â  Â  Â  Â  Â  Â  // Si connectÃ© et sur '/', on redirige vers le dashboard par rÃ´le
Â  Â  Â  Â  Â  Â  Â  redirectByRole(userData, router);
Â  Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  localStorage.removeItem("access_token_ghr");
Â  Â  Â  Â  Â  Â  localStorage.removeItem("refresh_token_ghr");
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  Â  // Autorise l'accÃ¨s Ã  la route publique
Â  Â  Â  Â  completeAuthorization(true, null); 
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  // 2. Routes privÃ©es : VÃ©rification du token
Â  Â  Â  if (!accessToken) {
Â  Â  Â  Â  completeAuthorization(false, "/login");
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  // 3. RÃ©cupÃ©ration des donnÃ©es utilisateur et vÃ©rification de rÃ´le
Â  Â  Â  const userData = await getCurrentUser();
Â  Â  Â  setUser(userData);

Â  Â  Â  if (userData?.role) {
Â  Â  Â  Â  const { role } = userData;
Â  Â  Â  Â  let allowedRoutes: Set<string> = new Set();
        
        // Logique d'assignation des allowedRoutes
Â  Â  Â  Â  if (role === "Caissier") { allowedRoutes = CaissierRoutes; } 
Â  Â  Â  Â  else if (role === "Receptionniste") { allowedRoutes = ReceptionRoutes; } 
Â  Â  Â  Â  else if (role === "Technicien") { allowedRoutes = TechnicienRoutes; } 
Â  Â  Â  Â  else if (role === "RH") { allowedRoutes = RhRoutes; } 
Â  Â  Â  Â  else if (role === "Manager") { allowedRoutes = ManagerRoutes; } 
Â  Â  Â  Â  else {
Â  Â  Â  Â  Â  console.warn(`RÃ´le inconnu: ${role}. Redirection vers /login`);
Â  Â  Â  Â  Â  completeAuthorization(false, "/login");
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
        
Â  Â  Â  Â  // 4. VÃ©rification de l'autorisation de la route actuelle
Â  Â  Â  Â  if (allowedRoutes.has(pathname)) {
Â  Â  Â  Â  Â  // AutorisÃ©
Â  Â  Â  Â  Â  completeAuthorization(true, null);
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  // Non autorisÃ© -> Redirection vers la page d'erreur
Â  Â  Â  Â  Â  console.warn(`AccÃ¨s non autorisÃ© Ã  ${pathname} pour le rÃ´le ${role}. Redirection vers /page-not-found.`);
Â  Â  Â  Â  Â  completeAuthorization(false, "/page-not-found");
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  Â  } else {
Â  Â  Â  Â  console.error("Informations utilisateur ou rÃ´le manquants aprÃ¨s l'authentification.");
Â  Â  Â  Â  completeAuthorization(false, "/login");
Â  Â  Â  Â  return;
Â  Â  Â  }
Â  Â  } catch (error) {
Â  Â  Â  console.error("Erreur lors de la vÃ©rification d'authentification/autorisation:", error);
Â  Â  Â  localStorage.removeItem("access_token_ghr");
Â  Â  Â  localStorage.removeItem("refresh_token_ghr");
Â  Â  Â  completeAuthorization(false, "/login");
Â  Â  }
Â  }, [pathname, router, getCurrentUser, isAuthorized, isRedirecting, CaissierRoutes, ReceptionRoutes, TechnicienRoutes, RhRoutes, ManagerRoutes, publicRoutes, redirectByRole, completeAuthorization]);

Â  useEffect(() => {
Â  Â  checkAuthorization();
Â  }, [checkAuthorization]);

Â  // ðŸ›‘ ANTI-BOUCLE 3 : useEffect pour rÃ©initialiser le drapeau isRedirecting aprÃ¨s le changement de route effectif
Â  // C'est ici que l'on donne le feu vert pour une nouvelle vÃ©rification.
Â  useEffect(() => {
Â  Â  if (isRedirecting && hasCheckedPath.current !== pathname) {
Â  Â  Â  // La redirection a eu lieu, on rÃ©initialise pour que checkAuthorization se relance 
Â  Â  Â  // sur le nouveau 'pathname' (/page-not-found ou /login) sans Ãªtre bloquÃ© par 'isRedirecting'.
Â  Â  Â  setIsRedirecting(false);
Â  Â  }
Â  }, [pathname, isRedirecting]);

Â  const logout = () => {
Â  Â  localStorage.removeItem("access_token_ghr");
Â  Â  localStorage.removeItem("refresh_token_ghr");
Â  Â  setUser(null);
Â  Â  hasCheckedPath.current = null;
Â  Â  router.replace("/login");
Â  };

Â  return (
Â  Â  <AuthContext.Provider value={{ user, loading, logout }}>
Â  Â  Â  {loading || !isAuthorized ? (
Â  Â  Â  Â  <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200">
Â  Â  Â  Â  Â  <Image
Â  Â  Â  Â  Â  Â  src={logoSrc}
Â  Â  Â  Â  Â  Â  alt="Logo de l'application"
Â  Â  Â  Â  Â  Â  width={150}
Â  Â  Â  Â  Â  Â  height={150}
Â  Â  Â  Â  Â  Â  className="mb-4 animate-pulse"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <p className="mt-4 text-xl font-medium text-center">
Â  Â  Â  Â  Â  Â  {currentMessage}
Â  Â  Â  Â  Â  Â  {dots}
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  </div>
Â  Â  Â  ) : (
Â  Â  Â  Â  children
Â  Â  Â  )}
Â  Â  </AuthContext.Provider>
Â  );
};

export const useAuthContext = () => {
Â  const context = React.useContext(AuthContext);
Â  if (!context) {
Â  Â  throw new Error(
Â  Â  Â  "useAuthContext doit Ãªtre utilisÃ© Ã  l'intÃ©rieur d'un AuthProvider"
Â  Â  );
Â  }
Â  return context;
};