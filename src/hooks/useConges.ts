import { useState, useEffect, useCallback } from "react";
import { congesService } from "@/services/conges";
import { personnelsService } from "@/services/personnels";
import { Conge, CongeFormData, Personnel, TypeConge, StatusConge } from "@/types";
import { useAuth } from "./useAuth";
import { eventBus } from "@/utils/eventBus";

// Interface s√©par√©e pour les cong√©s avec donn√©es du personnel
// Aligne les types "type" et "status" avec ceux de Conge (TypeConge/StatusConge)
// et √©tend la base Conge pour compatibilit√© structurelle.
interface CongeWithPersonnelData extends Conge {
  personnelName?: string;
  personnel?: Personnel; // align with Conge (no null)
}

// Interface personnalis√©e pour le hook
interface UseCongesResult {
  data: CongeWithPersonnelData[];
  loading: boolean;
  error: string | null;
  create: (data: CongeFormData) => Promise<CongeWithPersonnelData>;
  update: (id: number, data: CongeFormData) => Promise<CongeWithPersonnelData>;
  remove: (id: number) => Promise<void>;
}

export function useConges(personnelId?: number): UseCongesResult {
  const { user } = useAuth();
  const [data, setData] = useState<CongeWithPersonnelData[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  const etablissementId = user?.etablissement_id || user?.id;

  const fetchConges = useCallback(async () => {
    if (!etablissementId && !personnelId) {
      if (process.env.NODE_ENV === 'development') {
        console.warn("‚ö†Ô∏è [useConges] Aucun etablissementId ou personnelId fourni");
      }
      setData([]);
      setLoading(false);
      return;
    }

    setLoading(true);
    setError(null);

    try {
      let conges: Conge[] = [];
      if (personnelId) {
        if (process.env.NODE_ENV === 'development') {
          console.log(`üì° [useConges] R√©cup√©ration des cong√©s pour personnelId: ${personnelId}`);
        }
        conges = await congesService.getByPersonnel(personnelId);
      } else {
        if (process.env.NODE_ENV === 'development') {
          console.log(`üì° [useConges] R√©cup√©ration des cong√©s pour etablissementId: ${etablissementId}`);
        }
        conges = await congesService.getByEtablissement(etablissementId!);
      }

      if (process.env.NODE_ENV === 'development') {
        console.log("‚úÖ [useConges] Cong√©s r√©cup√©r√©s:", conges);
      }

      // Enrichir les cong√©s avec les donn√©es du personnel (appels API s√©par√©s)
      const congesWithPersonnel = await Promise.all(
        conges.map(async (conge) => {
          try {
            if (process.env.NODE_ENV === 'development') {
              console.log(`üì° [useConges] R√©cup√©ration du personnel ID ${conge.personnel_id}`);
            }
            
            // Appel s√©par√© √† l'API personnel
            const personnel = await personnelsService.getById(conge.personnel_id);
            
            // Cr√©er le nom complet (utiliser les champs du backend: nom, prenom)
            const personnelName = `${personnel.first_name} ${personnel.last_name}`.trim();
            
            if (process.env.NODE_ENV === 'development') {
              console.log(`‚úÖ [useConges] Personnel r√©cup√©r√© pour ID ${conge.personnel_id}: ${personnelName}`);
            }
            
            return { 
              ...conge, 
              personnel, 
              personnelName 
            } as CongeWithPersonnelData;
          } catch (err) {
            if (process.env.NODE_ENV === 'development') {
              console.warn(`‚ö†Ô∏è [useConges] Erreur r√©cup√©ration personnel ${conge.personnel_id}:`, err);
            }
            return { 
              ...conge, 
              // leave personnel undefined on error to align with base type
              personnelName: `Personnel ID: ${conge.personnel_id}` 
            } as CongeWithPersonnelData;
          }
        })
      );

      if (process.env.NODE_ENV === 'development') {
        console.log("‚úÖ [useConges] Cong√©s enrichis:", congesWithPersonnel);
      }

      setData(congesWithPersonnel);
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : "Erreur inconnue";
      if (process.env.NODE_ENV === 'development') {
        console.error("‚ùå [useConges] Erreur lors de la r√©cup√©ration des cong√©s:", errorMessage);
      }
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  }, [etablissementId, personnelId]);

  // Abonnements temps r√©el via EventBus pour les √©v√©nements du backend
  useEffect(() => {
    const offCreate = eventBus.on("conge_create", (payload: any) => {
      if (process.env.NODE_ENV === 'development') {
        console.log("üîî [useConges] √âv√©nement conge_create re√ßu:", payload);
      }
      // Rafra√Æchir les donn√©es quand un cong√© est cr√©√©
      fetchConges();
    });
    
    const offPatch = eventBus.on("conge_patch", (payload: any) => {
      if (process.env.NODE_ENV === 'development') {
        console.log("üîî [useConges] √âv√©nement conge_patch re√ßu:", payload);
      }
      // Rafra√Æchir les donn√©es quand un cong√© est mis √† jour
      fetchConges();
    });
    
    const offDelete = eventBus.on("conge_delete", (payload: any) => {
      if (process.env.NODE_ENV === 'development') {
        console.log("üîî [useConges] √âv√©nement conge_delete re√ßu:", payload);
      }
      // Rafra√Æchir les donn√©es quand un cong√© est supprim√©
      fetchConges();
    });

    return () => { 
      offCreate(); 
      offPatch(); 
      offDelete(); 
    };
  }, [fetchConges]);

  const create = useCallback(async (formData: CongeFormData): Promise<CongeWithPersonnelData> => {
    if (!etablissementId) {
      if (process.env.NODE_ENV === 'development') {
        console.warn("‚ö†Ô∏è [useConges] Aucun etablissementId pour la cr√©ation");
      }
      throw new Error("√âtablissement non d√©fini");
    }

    try {
      if (process.env.NODE_ENV === 'development') {
        console.log("üì° [useConges] Cr√©ation d'un cong√©:", formData);
      }
      const newConge = await congesService.create({ ...formData, etablissement_id: etablissementId });
      
      if (process.env.NODE_ENV === 'development') {
        console.log("‚úÖ [useConges] Cong√© cr√©√©:", newConge);
      }

      // R√©cup√©rer les donn√©es du personnel pour le nouveau cong√©
      let personnel: Personnel | undefined = undefined;
      let personnelName = "Inconnu";
      
      try {
        personnel = await personnelsService.getById(newConge.personnel_id, etablissementId);
        personnelName = `${personnel.first_name} ${personnel.last_name}`.trim();
        
        if (process.env.NODE_ENV === 'development') {
          console.log(`‚úÖ [useConges] Personnel r√©cup√©r√© pour nouveau cong√© ID ${newConge.id}: ${personnelName}`);
        }
      } catch (err) {
        if (process.env.NODE_ENV === 'development') {
          console.warn(`‚ö†Ô∏è [useConges] Erreur r√©cup√©ration personnel pour nouveau cong√©:`, err);
        }
      }
      
      const enrichedConge = { ...newConge, personnel, personnelName } as CongeWithPersonnelData;
      setData(prev => [...(prev || []), enrichedConge]);
      return enrichedConge;
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : "Erreur inconnue";
      if (process.env.NODE_ENV === 'development') {
        console.error("‚ùå [useConges] Erreur lors de la cr√©ation du cong√©:", errorMessage);
      }
      throw new Error(errorMessage);
    }
  }, [etablissementId]);

  const update = useCallback(async (id: number, formData: CongeFormData): Promise<CongeWithPersonnelData> => {
    try {
      if (process.env.NODE_ENV === 'development') {
        console.log(`üì° [useConges] Mise √† jour du cong√© ID ${id}:`, formData);
      }
      const updatedConge = await congesService.update(id, formData);
      
      if (process.env.NODE_ENV === 'development') {
        console.log("‚úÖ [useConges] Cong√© mis √† jour:", updatedConge);
      }

      // R√©cup√©rer les donn√©es du personnel pour le cong√© mis √† jour
      let personnel: Personnel | null = null;
      let personnelName = "Inconnu";
      
      try {
        personnel = await personnelsService.getById(updatedConge.personnel_id);
        personnelName = `${personnel.first_name} ${personnel.last_name}`.trim();
        
        if (process.env.NODE_ENV === 'development') {
          console.log(`‚úÖ [useConges] Personnel r√©cup√©r√© pour cong√© mis √† jour ID ${id}: ${personnelName}`);
        }
      } catch (err) {
        if (process.env.NODE_ENV === 'development') {
          console.warn(`‚ö†Ô∏è [useConges] Erreur r√©cup√©ration personnel pour cong√© mis √† jour:`, err);
        }
      }
      
      const enrichedConge = { ...updatedConge, personnel, personnelName } as CongeWithPersonnelData;
      setData(prev => (prev || []).map(c => c.id === id ? enrichedConge : c));
      return enrichedConge;
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : "Erreur inconnue";
      if (process.env.NODE_ENV === 'development') {
        console.error("‚ùå [useConges] Erreur lors de la mise √† jour du cong√©:", errorMessage);
      }
      throw new Error(errorMessage);
    }
  }, []);

  const remove = useCallback(async (id: number): Promise<void> => {
    try {
      if (process.env.NODE_ENV === 'development') {
        console.log(`üì° [useConges] Suppression du cong√© ID ${id}`);
      }
      await congesService.delete(id);
      
      if (process.env.NODE_ENV === 'development') {
        console.log("‚úÖ [useConges] Cong√© supprim√©:", id);
      }
      
      setData(prev => (prev || []).filter(c => c.id !== id));
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : "Erreur inconnue";
      if (process.env.NODE_ENV === 'development') {
        console.error("‚ùå [useConges] Erreur lors de la suppression du cong√©:", errorMessage);
      }
      throw new Error(errorMessage);
    }
  }, []);

  useEffect(() => {
    fetchConges();
  }, [fetchConges]);

  return {
    data,
    loading,
    error,
    create,
    update,
    remove,
  };
}